// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagement.DAL.Data;

#nullable disable

namespace StudentManagement.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentManagement.Domain.Models.AuditEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndTimeUtc")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("end_time_utc");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("error_message");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit")
                        .HasColumnName("is_success");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("meta_data");

                    b.Property<DateTime>("StartTimeUtc")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("start_time_utc");

                    b.HasKey("Id");

                    b.ToTable("audit_entries");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int")
                        .HasColumnName("academic_year");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("course_id");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int")
                        .HasColumnName("day_of_week");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("deadline");

                    b.Property<decimal>("EndTime")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("end_time");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("int")
                        .HasColumnName("max_students");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("room");

                    b.Property<int>("Semester")
                        .HasColumnType("int")
                        .HasColumnName("semester");

                    b.Property<decimal>("StartTime")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("start_time");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("teacher_name");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("classes");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.ClassStudent", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(8)")
                        .HasColumnName("student_id");

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("score");

                    b.HasKey("StudentId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("class_student");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("Credits")
                        .HasColumnType("int")
                        .HasColumnName("credits");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("faculty_id");

                    b.Property<string>("RequiredCourseId")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("required_course_id");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseName")
                        .IsUnique();

                    b.HasIndex("FacultyId");

                    b.HasIndex("RequiredCourseId");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("faculties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Khoa Toán"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            Name = "Khoa Công nghệ thông tin"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            Name = "Khoa Hoá"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111114"),
                            Name = "Khoa Lí"
                        });
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Identity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("country");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("number");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiry_date");

                    b.Property<bool>("IsChip")
                        .HasColumnType("bit")
                        .HasColumnName("is_chip");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("date")
                        .HasColumnName("issued_date");

                    b.Property<string>("IssuePlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("issue_place");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("note");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("student_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("CCCD")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("DocumentNumber")
                        .IsUnique();

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("identity_documents");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Program", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("programs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Đại trà"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            Name = "Chất lượng cao"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            Name = "Tiên tiến"
                        });
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.RegisterCancellationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("student_id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId", "ClassId")
                        .IsUnique();

                    b.ToTable("register_cancellation_history");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailDomain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_domain");

                    b.Property<string>("EmailPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_pattern");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailDomain = "@gmail.com",
                            EmailPattern = "^([\\w\\.\\-]+)@([\\w\\-]+)((\\.(\\w){2,3})+)$"
                        });
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(8)")
                        .HasColumnName("id");

                    b.Property<int>("Course")
                        .HasColumnType("int")
                        .HasColumnName("course");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("faculty_id");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Male")
                        .HasColumnName("gender");

                    b.Property<string>("MailingAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mailing_address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nationality");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("permanent_address");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("program_id");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("status_id");

                    b.Property<string>("TemporaryAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("temporary_address");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FacultyId");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("ProgramId");

                    b.HasIndex("StatusId");

                    b.ToTable("students");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.StudentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("student_statuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Đang học",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            Name = "Đã tốt nghiệp",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            Name = "Đã bảo lưu",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111114"),
                            Name = "Đã nghỉ học",
                            Order = 3
                        });
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Class", b =>
                {
                    b.HasOne("StudentManagement.Domain.Models.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.ClassStudent", b =>
                {
                    b.HasOne("StudentManagement.Domain.Models.Class", "Class")
                        .WithMany("ClassStudents")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Domain.Models.Student", "Student")
                        .WithMany("ClassStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Course", b =>
                {
                    b.HasOne("StudentManagement.Domain.Models.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Domain.Models.Course", "RequiredCourse")
                        .WithMany()
                        .HasForeignKey("RequiredCourseId");

                    b.Navigation("Faculty");

                    b.Navigation("RequiredCourse");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Identity", b =>
                {
                    b.HasOne("StudentManagement.Domain.Models.Student", "Student")
                        .WithOne("Identity")
                        .HasForeignKey("StudentManagement.Domain.Models.Identity", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.RegisterCancellationHistory", b =>
                {
                    b.HasOne("StudentManagement.Domain.Models.ClassStudent", "ClassStudent")
                        .WithOne("RegisterCancellationHistories")
                        .HasForeignKey("StudentManagement.Domain.Models.RegisterCancellationHistory", "StudentId", "ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassStudent");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Student", b =>
                {
                    b.HasOne("StudentManagement.Domain.Models.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagement.Domain.Models.Program", "Program")
                        .WithMany("Students")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagement.Domain.Models.StudentStatus", "Status")
                        .WithMany("Students")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Program");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Class", b =>
                {
                    b.Navigation("ClassStudents");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.ClassStudent", b =>
                {
                    b.Navigation("RegisterCancellationHistories");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Course", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Faculty", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Program", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.Student", b =>
                {
                    b.Navigation("ClassStudents");

                    b.Navigation("Identity")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Domain.Models.StudentStatus", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
